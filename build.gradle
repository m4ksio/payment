buildscript {
	ext {
		springBootVersion = '2.0.3.RELEASE'
	}
	repositories {
		mavenCentral()
		maven {
			url "https://plugins.gradle.org/m2/"
		}
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath 'se.transmode.gradle:gradle-docker:1.2'
		classpath "io.franzbecker:gradle-lombok:1.14"
	}
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'docker'
apply plugin: "io.franzbecker.gradle-lombok"

lombok {
	version = "1.18.0"
	sha256 = ""
}

group = 'io.m4ks'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8

sourceSets {
	integrationTest {
		java {
			compileClasspath += main.output + test.output
			runtimeClasspath += main.output + test.output
			srcDir file('src/integration-test/java')
		}
		resources.srcDir file('src/integration-test/resources')
	}
}

configurations {
	integrationTestCompile.extendsFrom testCompile
	integrationTestRuntime.extendsFrom testRuntime
}

repositories {
	mavenCentral()
	jcenter()
}

dependencies {
	compile('org.springframework.boot:spring-boot-starter-data-jpa')
	compile('org.springframework.boot:spring-boot-starter-integration')
	compile('org.springframework.boot:spring-boot-starter-validation')
	compile('org.springframework.boot:spring-boot-starter-web')
	compile('org.liquibase:liquibase-core')
	compileOnly('org.projectlombok:lombok')
	compile group: 'com.h2database', name: 'h2', version: '1.4.197'
	compile 'com.google.guava:guava:25.1-jre'
	compile group: 'commons-io', name: 'commons-io', version: '2.6'

	testCompile('org.springframework.boot:spring-boot-starter-test')

	//for JDK 10+ compatibility
	compile group: 'javax.xml.bind', name: 'jaxb-api', version: dependencyManagement.importedProperties['javax-jaxb.version']
	testCompile 'javax.activation:activation:1.1'

	integrationTestCompile 'io.rest-assured:rest-assured:3.1.0'
	// Spring Gradle plugin introduces it's own dependency management. This artifact relies on older version of
    // jersey-connector, but it's not bumped by Spring Plugin, while the other Jersey components are
    // so there is an JAR version-incompatibility created. Excluding it and manully adding with a proper version
    // does the job.
	integrationTestCompile("com.github.geowarin:docker-junit-rule:1.2.0") {
		exclude group: "org.glassfish.jersey.connectors", module: "jersey-apache-connector"
		exclude group: "com.spotify", module: "docker-client"
	}
	integrationTestCompile "org.glassfish.jersey.connectors:jersey-apache-connector:${dependencyManagement.importedProperties['jersey.version']}"
	// Never version of Jersey does not include HK2 API used in Docker plugin
	integrationTestCompile group: 'org.glassfish.jersey.inject', name: 'jersey-hk2', version: dependencyManagement.importedProperties['jersey.version']

	// Older versions of Spotify Client won't work with newer (2.9+) Jackson versions.
	// 2.8 of Jackson serializes null map values, while 2.9 omits them.
	integrationTestCompile group: "com.spotify", name: "docker-client", version: "8.11.7"
}

docker {
	baseImage "openjdk:10-jre-slim"
}

task paymentDocker(type: Docker, dependsOn: "bootJar") {
	applicationName = "payment"

	addFile bootJar.archivePath, bootJar.archiveName
	entryPoint(["java",  "-jar", bootJar.archiveName])
	exposePort 8080
	tagVersion "latest"
	tag = "m4ks/payment"
}

task integrationTest(type: Test, dependsOn: "paymentDocker") {
	testClassesDirs = sourceSets.integrationTest.output.classesDirs
	classpath = sourceSets.integrationTest.runtimeClasspath
}